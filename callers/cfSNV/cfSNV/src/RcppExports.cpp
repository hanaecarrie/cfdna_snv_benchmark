// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// estimate_TFestimate_main
int estimate_TFestimate_main(std::string filename, double MERGED_VAF_THRESHOLD, std::string file_prefix, double depth, std::string VAF_output, std::string estimate_output);
RcppExport SEXP _cfSNV_estimate_TFestimate_main(SEXP filenameSEXP, SEXP MERGED_VAF_THRESHOLDSEXP, SEXP file_prefixSEXP, SEXP depthSEXP, SEXP VAF_outputSEXP, SEXP estimate_outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< double >::type MERGED_VAF_THRESHOLD(MERGED_VAF_THRESHOLDSEXP);
    Rcpp::traits::input_parameter< std::string >::type file_prefix(file_prefixSEXP);
    Rcpp::traits::input_parameter< double >::type depth(depthSEXP);
    Rcpp::traits::input_parameter< std::string >::type VAF_output(VAF_outputSEXP);
    Rcpp::traits::input_parameter< std::string >::type estimate_output(estimate_outputSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_TFestimate_main(filename, MERGED_VAF_THRESHOLD, file_prefix, depth, VAF_output, estimate_output));
    return rcpp_result_gen;
END_RCPP
}
// filter_with_pileup_main
int filter_with_pileup_main(std::string fInput, std::string fIntermediate, std::string fOutputPass, std::string fOutputCheck, std::string fRecord, std::string fTF, double mergedVAFThreshold, std::string SNPDatabase, double depth);
RcppExport SEXP _cfSNV_filter_with_pileup_main(SEXP fInputSEXP, SEXP fIntermediateSEXP, SEXP fOutputPassSEXP, SEXP fOutputCheckSEXP, SEXP fRecordSEXP, SEXP fTFSEXP, SEXP mergedVAFThresholdSEXP, SEXP SNPDatabaseSEXP, SEXP depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fInput(fInputSEXP);
    Rcpp::traits::input_parameter< std::string >::type fIntermediate(fIntermediateSEXP);
    Rcpp::traits::input_parameter< std::string >::type fOutputPass(fOutputPassSEXP);
    Rcpp::traits::input_parameter< std::string >::type fOutputCheck(fOutputCheckSEXP);
    Rcpp::traits::input_parameter< std::string >::type fRecord(fRecordSEXP);
    Rcpp::traits::input_parameter< std::string >::type fTF(fTFSEXP);
    Rcpp::traits::input_parameter< double >::type mergedVAFThreshold(mergedVAFThresholdSEXP);
    Rcpp::traits::input_parameter< std::string >::type SNPDatabase(SNPDatabaseSEXP);
    Rcpp::traits::input_parameter< double >::type depth(depthSEXP);
    rcpp_result_gen = Rcpp::wrap(filter_with_pileup_main(fInput, fIntermediate, fOutputPass, fOutputCheck, fRecord, fTF, mergedVAFThreshold, SNPDatabase, depth));
    return rcpp_result_gen;
END_RCPP
}
// genotype_genotype_main
int genotype_genotype_main(std::string finput, std::string foutputCall, double tumorFraction, double mergedVAFThreshold, double depth, int MIN_PASS_SUPPORT_COUNT);
RcppExport SEXP _cfSNV_genotype_genotype_main(SEXP finputSEXP, SEXP foutputCallSEXP, SEXP tumorFractionSEXP, SEXP mergedVAFThresholdSEXP, SEXP depthSEXP, SEXP MIN_PASS_SUPPORT_COUNTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type finput(finputSEXP);
    Rcpp::traits::input_parameter< std::string >::type foutputCall(foutputCallSEXP);
    Rcpp::traits::input_parameter< double >::type tumorFraction(tumorFractionSEXP);
    Rcpp::traits::input_parameter< double >::type mergedVAFThreshold(mergedVAFThresholdSEXP);
    Rcpp::traits::input_parameter< double >::type depth(depthSEXP);
    Rcpp::traits::input_parameter< int >::type MIN_PASS_SUPPORT_COUNT(MIN_PASS_SUPPORT_COUNTSEXP);
    rcpp_result_gen = Rcpp::wrap(genotype_genotype_main(finput, foutputCall, tumorFraction, mergedVAFThreshold, depth, MIN_PASS_SUPPORT_COUNT));
    return rcpp_result_gen;
END_RCPP
}
// ParseFile
void ParseFile(std::string in_file_name, std::string out_file_name, std::string indel_file_name, float depth, int MIN_PASS_SUPPORT_COUNT);
RcppExport SEXP _cfSNV_ParseFile(SEXP in_file_nameSEXP, SEXP out_file_nameSEXP, SEXP indel_file_nameSEXP, SEXP depthSEXP, SEXP MIN_PASS_SUPPORT_COUNTSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type in_file_name(in_file_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type out_file_name(out_file_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type indel_file_name(indel_file_nameSEXP);
    Rcpp::traits::input_parameter< float >::type depth(depthSEXP);
    Rcpp::traits::input_parameter< int >::type MIN_PASS_SUPPORT_COUNT(MIN_PASS_SUPPORT_COUNTSEXP);
    ParseFile(in_file_name, out_file_name, indel_file_name, depth, MIN_PASS_SUPPORT_COUNT);
    return R_NilValue;
END_RCPP
}
// machinelearn_extract_features_from_reads_filter_cluster
int machinelearn_extract_features_from_reads_filter_cluster(std::string inpath, std::string outpath, std::string sample_id, int WINDOW);
RcppExport SEXP _cfSNV_machinelearn_extract_features_from_reads_filter_cluster(SEXP inpathSEXP, SEXP outpathSEXP, SEXP sample_idSEXP, SEXP WINDOWSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inpath(inpathSEXP);
    Rcpp::traits::input_parameter< std::string >::type outpath(outpathSEXP);
    Rcpp::traits::input_parameter< std::string >::type sample_id(sample_idSEXP);
    Rcpp::traits::input_parameter< int >::type WINDOW(WINDOWSEXP);
    rcpp_result_gen = Rcpp::wrap(machinelearn_extract_features_from_reads_filter_cluster(inpath, outpath, sample_id, WINDOW));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cfSNV_estimate_TFestimate_main", (DL_FUNC) &_cfSNV_estimate_TFestimate_main, 6},
    {"_cfSNV_filter_with_pileup_main", (DL_FUNC) &_cfSNV_filter_with_pileup_main, 9},
    {"_cfSNV_genotype_genotype_main", (DL_FUNC) &_cfSNV_genotype_genotype_main, 6},
    {"_cfSNV_ParseFile", (DL_FUNC) &_cfSNV_ParseFile, 5},
    {"_cfSNV_machinelearn_extract_features_from_reads_filter_cluster", (DL_FUNC) &_cfSNV_machinelearn_extract_features_from_reads_filter_cluster, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_cfSNV(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
